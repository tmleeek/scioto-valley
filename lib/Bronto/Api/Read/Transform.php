<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Read/Transform.php
 */


/**
 * A simple iterator that simply transform the result on
 * the fly.
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
class Bronto_Api_Read_Transform implements Iterator, Countable
{
    private $_operation;
    private $_result;
    private $_iter;

    /**
     * @param Bronto_Api_Operation $operation
     * @param stdClass $result
     */
    public function __construct(Bronto_Api_Operation $operation, $result)
    {
        $this->_operation = $operation;
        $this->_result = $result;
        $this->_iter = new ArrayIterator(property_exists($result, 'return') ? $result->return : array());
        $this->_iter->rewind();
    }

    /**
     * Gets the raw results from the API
     *
     * @return stdClass
     */
    public function getResult()
    {
        return $this->_result;
    }

    /**
     * Gets the operation associated with this read
     *
     * @return Bronto_Api_Operation
     */
    public function getOperation()
    {
        return $this->_operation;
    }

    /**
     * Counts the records in this iterator
     *
     * @return int
     */
    public function count()
    {
        return $this->_iter->count();
    }

    /**
     * @see parent
     */
    public function rewind()
    {
        $this->_iter->rewind();
    }

    /**
     * @see parent
     */
    public function next()
    {
        $this->_iter->next();
    }

    /**
     * @see parent
     * @return boolean
     */
    public function valid()
    {
        return $this->_iter->valid();
    }

    /**
     * @see parent
     * @return scalar
     */
    public function key()
    {
        return $this->_iter->current()->id;
    }

    /**
     * @see parent
     * @return Bronto_Api_Object
     */
    public function current()
    {
        return $this->_operation->createObject((array) $this->_iter->current());
    }
}
