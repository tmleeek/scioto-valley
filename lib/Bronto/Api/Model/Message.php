<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Model/Message.php
 */

/**
 * Model class for Bronto_Api_Model_Message level convenience methods
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
class Bronto_Api_Model_Message extends Bronto_Api_Object
{
    const TYPE_TEXT = 'text';
    const TYPE_HTML = 'html';

    private static $_supportedTypes = array(self::TYPE_TEXT, self::TYPE_HTML);

    protected $_contentTypesToIndex = array();

    /**
     * @see parent
     */
    public function __construct(array $data = array())
    {
        parent::__construct('Message', $data);
    }

    /**
     * Convenience method for adding different contents
     *
     * @see parent
     */
    protected function _defaultMethod($prefix, $camelized, $arguments)
    {
        switch ($prefix) {
        case 'add':
        case 'content':
            if (!in_array($camelized, self::$_supportedTypes)) {
                throw new InvalidArgumentException("Message object only supports " . implode (', ', self::$_supportedTypes) . " but provided {$camelized}.");
            }
            $object = $arguments[0];
            if ($object instanceof Bronto_Object) {
                $object = $object->toArray();
            }
            if (is_array($object)) {
                extract($object);
            }
            $object = array(
                'type' => $camelized,
                'subject' => empty($subject) ? $arguments[0] : $subject,
                'content' => empty($content) ? $arguments[1] : $content
            );
            if (!array_key_exists('content', $this->_data)) {
                $this->_data['content'] = array();
            }
            if (!array_key_exists($camelized, $this->_contentTypesToIndex)) {
                $this->_contentTypesToIndex[$camelized] = array_push($this->_data['content'], $object) - 1;
            } else {
                $this->_data['content'][$this->_contentTypesToIndex[$camelized]] = $object;
            }
            return $this;
        default:
            return parent::_defaultMethod($prefix, $camelized, $arguments);
        }
    }
}
