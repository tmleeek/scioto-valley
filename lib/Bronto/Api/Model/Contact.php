<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Model/Contact.php
 */

/**
 * Model class for contact level convenience methods
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
class Bronto_Api_Model_Contact extends Bronto_Api_Object
{
    const STATUS_ACTIVE = 'active';
    const STATUS_ONBOARDING = 'onboarding';
    const STATUS_TRANSACTIONAL = 'transactional';
    const STATUS_BOUNCE = 'bounce';
    const STATUS_UNSUBSCRIBED = 'unsub';
    const STATUS_UNCONFIRMED = 'unconfirmed';

    const VARCHAR_LIMIT = 65535;

    protected $_apiFields = array();
    protected $_fieldIdToIndex = array();

    /**
     * @see parent
     */
    public function __construct(array $data = array())
    {
        parent::__construct('Contact', $data);
    }

    /**
     * To take advantage of field conversions you must set
     * a hash table of fieldId => Bronto_Api_Object (Bronto_Api_Model_Field)
     *
     * @param Bronto_Api_Read|array $apiFields
     * @return Bronto_Api_Model_Contact
     */
    public function setFieldTable($apiFields)
    {
        if ($apiFields instanceof Bronto_Api_Read) {
            $apiFields = $apiFields->getIterator()->toArray();
        }
        $this->_apiFields = $apiFields;
        return $this;
    }

    /**
     * Convenience method for adding/setting field values for contact
     *
     * @param Bronto_Object|string $fieldId
     * @param mixed $content
     * @return Bronto_Api_Model_Contact
     */
    public function addField($fieldId, $content = null)
    {
        if (!array_key_exists('fields', $this->_data)) {
            $this->_set('fields', array());
        }
        if ($fieldId instanceof Bronto_Object) {
            $data = $fieldId->toArray();
        } else {
            $data = array('fieldId' => $fieldId, 'content' => $content);
        }
        $data['content'] = $this->_convert($data['fieldId'], $data['content']);
        if (array_key_exists($data['fieldId'], $this->_fieldIdToIndex)) {
            $this->_data['fields'][$this->_fieldIdToIndex[$data['fieldId']]] = $data;
        } else {
            $this->_fieldIdToIndex[$data['fieldId']] = array_push($this->_data['fields'], $data) - 1;
        }
        return $this;
    }

    /**
     * Convenience method for adding list membership directly
     *
     * @param mixed $listIdOrList
     * @return Bronto_Api_Model_Contact
     */
    public function addList($listIdOrList)
    {
        if ($listIdOrList instanceof Bronto_Object) {
            $listIdOrList = $listIdOrList->getId();
        }
        if (!array_key_exists('listIds', $this->_data)) {
            $this->_set('listIds', array());
        }
        if (!in_array($listIdOrList, $this->_data['listIds'])) {
            $this->_data['listIds'][] = $listIdOrList;
        }
        return $this;
    }

    /**
     * Convenience method for removing list membership directly
     *
     * @param mixed $listIdOrList
     * @return Bronto_Api_Model_Contact
     */
    public function removeList($listIdOrList)
    {
        if ($listIdOrList instanceof Bronto_Object) {
            $listIdOrList = $listIdOrList->getId();
        }
        if (!array_key_exists('listIds', $this->_data)) {
            return $this;
        }
        $index = array_search($listIdOrList, $this->_data['listIds']);
        if ($index === false) {
            return $this;
        }
        array_splice($this->_data['listIds'], $index, 1);
        return $this;
    }

    /**
     * Internal helper to convert the contact field value to
     * an APIv4 friendly value
     *
     * @param string $fieldId
     * @param mixed $content
     * @return string
     */
    protected function _convert($fieldId, $content)
    {
        // Short circuit, as this means to unset field value
        if (is_null($content) || $content === '') {
            return '';
        }
        $type = Bronto_Api_Model_Field::TYPE_TEXT;
        if (array_key_exists($fieldId, $this->_apiFields)) {
            $type = $this->_apiFields[$fieldId]->getType();
        }
        switch ($type) {
        case Bronto_Api_Model_Field::TYPE_CHECKBOX:
            return empty($content) ? '0' : '1';
        case Bronto_Api_Model_Field::TYPE_DATE:
            if (is_string($content)) {
                $content = strtotime($content);
            }
            return date('c', $content);
        case Bronto_Api_Model_Field::TYPE_TEXT:
        case Bronto_Api_Model_Field::TYPE_TEXTAREA:
        case Bronto_Api_Model_Field::TYPE_PASSWORD:
        default:
            $content = (string)$content;
            if (strlen($content) > self::VARCHAR_LIMIT) {
                throw new InvalidArgumentException("Bronto_Api_Model_Field length is greater than " . self::VARCHAR_LIMIT . " characters.");
            }
            return $content;
        }
    }
}
