<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Model/DeliveryAbstract.php
 */

/**
 * Model class for delivery level convenience methods
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
abstract class Bronto_Api_Model_DeliveryAbstract extends Bronto_Api_Object
{
    const TARGET_CONTACT = 'contact';
    const TARGET_LIST = 'list';
    const TARGET_SEGMENT = 'segment';
    const TARGET_KEYWORD = 'keyword';

    const DELIVERY_SELECTED = 'selected';
    const DELIVERY_ELIGIBLE = 'eligible';
    const DELIVERY_INELIGIBLE = 'ineligible';

    protected $_tagToIndex = array();

    /**
     * Determines if the type of the delivery is transactional
     *
     * @return boolean
     */
    public abstract function isTransactional();

    /**
     * Convenience method for adding message field tags to deliveries
     *
     * @param mixed $name
     * @param mixed $content
     * @param string $type
     * @return Bronto_Api_Model_Delivery
     */
    public function withField($name, $content = null, $type = 'html')
    {
        if (($name instanceof Bronto_Object) && is_null($content)) {
            $name = $name->toArray();
        }
        if (is_array($name)) {
            extract($name);
        }
        if (strlen($name) > 25) {
            throw new InvalidArgumentException("Bronto_Api_Model_Field `{$name}` is more than 25 characters.");
        }
        $messageField = array(
            'name' => $name,
            'content' => $content,
            'type' => $type
        );
        if (array_key_exists($name, $this->_tagToIndex)) {
            $this->_data['fields'][$this->_tagToIndex[$name]] = $messageField;
        } else {
            if (!array_key_exists('fields', $this->_data)) {
                $this->_data['fields'] = array();
            }
            $this->_tagToIndex[$name] = array_push($this->_data['fields'], $messageField) - 1;
        }
        return $this;
    }

    /**
     * Convenience method for adding a collection of fields to a delivery
     *
     * @param array $fields
     * @return Bronto_Api_Model_Delivery
     */
    public function withFields($fields)
    {
        foreach ($fields as $field) {
            $this->withField($field);
        }
        return $this;
    }

    /**
     * Allows chaining recipients together through function calls, ie:
     * $delivery->addContact($contactId)->ineligibleList($listId);
     *
     * @see parent
     */
    protected function _defaultMethod($prefix, $camelized, $arguments)
    {
        switch ($prefix) {
        case 'add':
        case self::DELIVERY_SELECTED:
        case self::DELIVERY_ELIGIBLE:
        case self::DELIVERY_INELIGIBLE:
            $objectId = $arguments[0];
            if ($objectId instanceof Bronto_Object) {
                $objectId = $objectId->getId();
            }
            if (!array_key_exists('recipients', $this->_data)) {
                $this->_data['recipients'] = array();
            }
            // TODO: we'll probably want to very here before sending
            // if the types set are valid or not
            $this->_data['recipients'][] = array(
                'type' => $camelized,
                'id' => $objectId,
                'deliveryType' => $prefix == 'add' ? self::DELIVERY_SELECTED : $prefix
            );
            return $this;
        default:
            return parent::_defaultMethod($prefix, $camelized, $arguments);
        }
    }
}
