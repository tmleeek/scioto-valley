<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Model/Field.php
 */

/**
 * Model class for field level convenience methods
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
class Bronto_Api_Model_Field extends Bronto_Api_Object
{
    const TYPE_INTEGER = 'integer';
    const TYPE_TEXT = 'text';
    const TYPE_TEXTAREA = 'textarea';
    const TYPE_PASSWORD = 'password';
    const TYPE_CHECKBOX = 'checkbox';
    const TYPE_RADIO = 'radio';
    const TYPE_SELECT = 'select';
    const TYPE_CURRENCY = 'currency';
    const TYPE_FLOAT = 'float';
    const TYPE_DATE = 'date';

    const VISIBLE_PRIVATE = 'private';
    const VISIBLE_PUBLIC = 'public';

    private static $_mappedWords = array(
        'hidden' => self::VISIBLE_PRIVATE,
        'notVisible' => self::VISIBLE_PRIVATE,
        'discreet' => self::VISIBLE_PRIVATE,
        'private' => self::VISIBLE_PRIVATE,
        'visible' => self::VISIBLE_PUBLIC,
        'notHidden' => self::VISIBLE_PUBLIC,
        'public' => self::VISIBLE_PUBLIC,
    );

    /**
     * @see parent
     */
    public function __construct(array $data = array())
    {
        parent::__construct('Field', array_merge(array('visibility' => 'private'), $data));
    }

    /**
     * Allows an addtional prefix 'as' to set the type of field, ie: asText()
     * Also visibility, ie: asPublic(), asPrivate()
     *
     * @see parent
     */
    protected function _defaultMethod($prefix, $camelized, $arguments)
    {
        switch ($prefix) {
        case 'as':
            if (array_key_exists($camelized, self::$_mappedWords)) {
                return $this->_set('visibility', self::$_mappedWords[$camelized]);
            } else {
                return $this->_set('type', $camelized);
            }
        case 'is':
            if (array_key_exists($camelized, self::$_mappedWords)) {
                return $this->_data['visibility'] == $camelized;
            }
            return $this->_data['type'] == $camelized;
        default:
            return parent::_defaultMethod($prefix, $camelized, $arguments);
        }
    }

    /**
     * Adds field options to the field as a chainable property
     *
     * @param Bronto_Object|string $value
     * @param mixed $label
     * @param boolean $isDefault
     * @return Bronto_Api_Model_Field
     */
    public function addOption($value, $label = null, $isDefault = false)
    {
        if (!array_key_exists('options', $this->_data)) {
            $this->_data['options'] = array();
        }
        if ($value instanceof Bronto_Object) {
            extract($value->toArray());
        }
        if (is_bool($label)) {
            $isDefault = $label;
            $label = null;
        }
        if (is_null($label)) {
            $label = (string) $value;
        }
        if ($isDefault) {
            foreach ($this->_data['options'] as &$option) {
                $option['isDefault'] = false;
            }
        }

        $this->_data['options'][] = array(
            'value' => $value,
            'label' => $label,
            'isDefault' => $isDefault
        );
        return $this;
    }
}
