<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Api/Write/Pager.php
 */


/**
 * Iterator housing the writeResult from the APIv4.
 *
 * @author Philip Cali <philip.cali@bronto.com>
 */
class Bronto_Api_Write_Pager implements Iterator
{
    private $_operation;
    private $_request;
    private $_result;
    private $_data;
    private $_errorsOnly = false;
    private $_iter;

    /**
     * @param Bronto_Api_Operation $operation
     * @param Bronto_Object $request
     */
    public function __construct(Bronto_Api_Operation $operation, Bronto_Object $request)
    {
        $this->_operation = $operation;
        $this->_request = $request;
    }

    /**
     * Init method that sets the internal writeResult
     *
     * @return void
     */
    protected function _init()
    {
        if (is_null($this->_result)) {
            $data = $this->_request->getData();
            if (array_key_exists($this->_request->getKey(), $data)) {
                $this->_data = $data[$this->_request->getKey()];
            }
            if (empty($this->_data)) {
                throw new InvalidArgumentException("No {$this->_request->getKey()} set in this request to transfer{$this->_operation->getTransferType()}.");
            }
            $this->_result = $this->_operation->getApi()->execute($this->_request);
            $resultSize = count($this->_result->return->results);
            if ($this->_errorsOnly) {
                $errors = property_exists($this->_result->return, 'errors') ?
                    $this->_result->return->errors :
                    array();
                $this->_iter = new ArrayIterator($errors);
            } else {
                $this->_iter = new ArrayIterator($this->_result->return->results);
            }
        }
    }

    /**
     * Gets the API operation used to make this request
     *
     * @return Bronto_Api_Operation
     */
    public function getOperation()
    {
        return $this->_operation;
    }

    /**
     * Gets the original write request
     *
     * @return Bronto_Object
     */
    public function getRequest()
    {
        return $this->_request;
    }

    /**
     * Gets the raw API writeResult
     *
     * @return stdClass
     */
    public function getResult()
    {
        if (is_null($this->_result)) {
            $this->_init;
        }
        return $this->_result;
    }

    /**
     * Iterates only on errors.
     *
     * @return Pager
     */
    public function errorsOnly()
    {
        $this->_errorsOnly = true;
        return $this;
    }

    /**
     * Iterates on all result items
     *
     * @return Pager
     */
    public function allResults()
    {
        $this->_errorsOnly = false;
        return $this;
    }

    /**
     * @see parent
     */
    public function rewind()
    {
        $this->_init();
        $this->_iter->rewind();
    }

    /**
     * @see parent
     */
    public function next()
    {
        $this->_iter->next();
    }

    /**
     * @see parent
     * @return boolean
     */
    public function valid()
    {
        return $this->_iter->valid();
    }

    /**
     * @see parent
     * @return scalar
     */
    public function key()
    {
        return $this->_errorsOnly ? $this->_iter->current() : $this->_iter->key();
    }

    /**
     * @see parent
     * @return mixed
     */
    public function current()
    {
        $item = (array) $this->_result->return->results[$this->key()];
        $original = !isset($this->_data[$this->key()]) ? array() : $this->_data[$this->key()];
        return new Bronto_Object(array(
            'item' => new Bronto_Object($item),
            'original' => $this->_operation->createObject($original)
        ));
    }
}
