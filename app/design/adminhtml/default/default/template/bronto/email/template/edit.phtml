<?php //echo $this->getUsedDefaultForPaths(); ?>
<div class="content-header">
    <h3 class="icon-head head-system-email-template"><?php echo $this->getHeaderText() ?></h3>
    <p class="content-buttons form-buttons">
        <?php echo $this->getBackButtonHtml(); ?>
        <?php echo $this->getResetButtonHtml(); ?>
        <?php if ($this->getEditMode()): ?>
            <?php echo $this->getDeleteButtonHtml(); ?>
        <?php endif ?>
        <?php echo $this->getSaveButtonHtml(); ?>
    </p>
</div>

<?php if (!$this->getEditMode()): ?>
    <form action="<?php echo $this->getLoadUrl() ?>" method="post" id="email_template_load_form">
        <?php echo $this->getBlockHtml('formkey')?>
        <div class="entry-edit">
            <div class="entry-edit-head">
                <h4 class="icon-head head-edit-form fieldset-legend">
                <?php echo Mage::helper('adminhtml')->__('Load Magento Template') ?>
                </h4>
                <div class="form-buttons"></div>
            </div>
            <div class="fieldset">
                <table class="form-list" cellspacing="0">
                    <tbody>
                        <tr>
                            <td class="label">
                                <label for="template_select">
                                <?php echo Mage::helper('adminhtml')->__('Template') ?>
                                <span class="required">*</span>
                                </label>
                            </td>
                            <td class="value">
                                <select id="template_select" name="code" class="select required-entry">
                                    <?php foreach ($this->getTemplateOptions() as $_option): ?>
                                    <option value="<?php echo $_option['value'] ?>"<?php echo $this->getOrigTemplateCode() == $_option['value'] ? ' selected="selected"' : '' ?>><?php echo $_option['label'] ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td class="label">
                                <label for="locale_select">
                                <?php echo Mage::helper('adminhtml')->__('Locale') ?>
                                <span class="required">*</span>
                                </label>
                            </td>
                            <td class="value">
                                <select id="locale_select" name="locale" class="select required-entry">
                                    <?php foreach ($this->getLocaleOptions() as $_option): ?>
                                    <option value="<?php echo $_option['value'] ?>"<?php if ($_option['value']==$this->getCurrentLocale()): ?> selected="selected"<?php endif; ?>><?php echo $_option['label'] ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td class="label">
                                <label>&nbsp;</label>
                            </td>
                            <td class="value">
                                <?php echo $this->getLoadButtonHtml() ?>
                            </td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </form>
<?php endif ?>
<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="email_template_edit_form">
    <?php echo $this->getBlockHtml('formkey')?>
    <fieldset>
        <input type="hidden" id="change_flag_element" name="_change_type_flag" value="" />
        <input type="hidden" id="orig_template_code" name="orig_template_code" value="<?php echo $this->getOrigTemplateCode() ?>" />
        <?php echo $this->getFormHtml() ?>
    </fieldset>
</form>
<script type="text/javascript">
//<![CDATA[
function replaceAll(txt, replace, with_this) {
    return txt.replace(new RegExp(replace, 'g'), with_this);
}

function ucwords(str) {
    return (str + '').replace(/^([a-z])|\s+([a-z])/g, function ($1) {
        return $1.toUpperCase();
    });
}

function lcfirst(str) {
    str += '';
    var f = str.charAt(0).toLowerCase();
    return f + str.substr(1);
}

function camelize(str, dest_sep, src_sep) {
    dest_sep = dest_sep || '';
    src_sep  = src_sep || '_';
    str = ucwords(replaceAll(str, src_sep, ' '));
    str = replaceAll(str, ' ', dest_sep);
    return str;
}

var templateForm = new varienForm('email_template_edit_form');
var templatePreviewForm = new varienForm('email_template_preview_form');
var templateControl = {
    unconvertedText: '',
    variables: null,

    init: function () {
        this.showVariablesKey();
        this.renderPaths(<?php echo $this->getUsedDefaultForPaths(); ?>, 'used_default_for');
        this.renderPaths(<?php echo $this->getUsedCurrentlyForPaths(); ?>, 'used_currently_for');
    },

    save: function() {
        templateForm.submit();
        return false;
    },

    deleteTemplate: function() {
        if (window.confirm("<?php echo $this->__('Are you sure that you want to delete this template?') ?>")) {
            window.location.href = '<?php echo $this->getDeleteUrl() ?>';
        }
    },

    load: function() {
        var form = new varienForm('email_template_load_form');
        if (!form.validator.validate()) {
            return;
        }
        this.variables = null;
        new Ajax.Request($('email_template_load_form').action, {
            parameters: Form.serialize($('email_template_load_form'), true),
            area: $('email_template_load_form'),
            onComplete: function (transport) {
                if (transport.responseText.isJSON()) {
                    var fields = $H(transport.responseText.evalJSON());
                    fields.each(function(pair) {
                        if ($(pair.key)) {
                            $(pair.key).value = pair.value.strip();
                            if (pair.key == 'template_text') {
                                $('orig_template_text').value = pair.value.strip();
                            }
                            if ($(pair.key + '_hidden') != undefined) {
                                $(pair.key + '_hidden').value = pair.value.strip();
                            }
                        }
                        if (pair.key == 'orig_template_used_default_for') {
                            if (pair.value.length){
                                $('used_default_for').show();
                                this.renderPaths(pair.value, 'used_default_for');
                            }
                            else{
                                $('used_default_for').hide();
                            }
                        }
                    }.bind(this));
                    this.showVariablesKey();
                }
            }.bind(this)
        });
    },

    convertToBrontoVariable: function(str) {
        if (str.indexOf('{{store') != -1 ||
            str.indexOf('{{skin') != -1 ||
            str.indexOf('{{layout') != -1 ||
            str.indexOf('{{block') != -1) {
            return false;
        }
        str = str.replace('{{var ', ''),
        str = str.replace('{{htmlescape var=$', ''),
        str = str.replace("Formated('long')", ''),
        str = str.replace('}}', '');
        var parts = str.split('.');
        for (var i = 0; i <= parts.length; i++) {
            if (typeof parts[i] != 'undefined') {
                if (parts[i].indexOf('get') == 0) {
                    // Method
                    parts[i] = parts[i].replace('get', '');
                    parts[i] = parts[i].replace('()', '');
                }
                if (parts[i].indexOf('format') == 0) {
                    parts.splice(i, 1);
                }
            }
        }
        str = parts.join('_');
        return str;
    },

    showVariablesKey: function() {
        this.variables = [];
        var templateVariablesValue = $('template_variables').value;
        if (templateVariablesValue) {
            var templateVariables = templateVariablesValue.evalJSON();
            if (templateVariables) {
                var count    = 0;
                var listHtml = '<ul>';
                this.variables.push(templateVariables);
                this.variables.each(function(variableGroup) {
                    if (variableGroup.label && variableGroup.value) {
                        (variableGroup.value).each(function(variable){
                            if (variable.value && variable.label) {
                                var brontoValue = this.convertToBrontoVariable(variable.value);
                                if (brontoValue) {
                                    listHtml += '<li>';
                                    listHtml += '<label style="display:block;float:left;font-weight:bold;width:200px">' + variable.label + '</label>';
                                    listHtml += '<pre>' + lcfirst(camelize(brontoValue)) + '</pre>'
                                    listHtml += '</li>';
                                    count++;
                                }
                            }
                        }.bind(this));
                    }
                }.bind(this));
                listHtml += '</ul>';
                $('template_variables_key_list').innerHTML = listHtml;
                if (count) {
                    $("template_variables_key_row").show();
                } else {
                    $("template_variables_key_row").hide();
                }
            }
        }
    },

    renderPaths: function(paths, fieldId){
        var field = $(fieldId);
        if (field){
            field.down('td').next('td').update(this.parsePath(paths, '<span class="path-delimiter">&nbsp;-&gt;&nbsp;</span>', '<br />'));
            if (paths.length == 0) {
                field.hide();
            }
        }
    },

    parsePath: function (value, pathDelimiter, lineDelimiter) {
        if (Object.isArray(value)) {
            console.log(value);
            var result = [];
            for (var i = 0, len = value.length; i < len; i++) {
                result.push(this.parsePath(value[i], pathDelimiter, pathDelimiter));
            }
            return result.join(lineDelimiter);
        }

        if(!Object.isString(value) && value.title) {
            console.log(value);
            value = (value.url ? '<a href="' + value.url + '">' + value.title + '</a>' : value.title) + (value.scope ? '&nbsp;&nbsp;<span class="path-scope-label">(' + value.scope + ')</span>' : '');
        }

        return value;
    },

    openVariableChooser: function() {
        Variables.init('template_text');
        if (this.variables == null) {
            Variables.resetData();
            this.variables = $('variables').value.evalJSON();
            var templateVariablesValue = $('template_variables').value;
            if (this.variables && templateVariablesValue) {
                if (templateVariables = templateVariablesValue.evalJSON()) {
                    this.variables.push(templateVariables);
                }
            }
        }
        if (this.variables) {
            Variables.openVariableChooser(this.variables);
        }
    }
};

templateControl.init();

function htmlspecialchars (string, quote_style, charset, double_encode) {
  // http://kevin.vanzonneveld.net
  // +   original by: Mirek Slugen
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +   bugfixed by: Nathan
  // +   bugfixed by: Arno
  // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
  // +      input by: Ratheous
  // +      input by: Mailfaker (http://www.weedem.fr/)
  // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
  // +      input by: felix
  // +    bugfixed by: Brett Zamir (http://brett-zamir.me)
  // %        note 1: charset argument not supported
  // *     example 1: htmlspecialchars("<a href='test'>Test</a>", 'ENT_QUOTES');
  // *     returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'
  // *     example 2: htmlspecialchars("ab\"c'd", ['ENT_NOQUOTES', 'ENT_QUOTES']);
  // *     returns 2: 'ab"c&#039;d'
  // *     example 3: htmlspecialchars("my "&entity;" is still here", null, null, false);
  // *     returns 3: 'my &quot;&entity;&quot; is still here'
  var optTemp = 0,
    i = 0,
    noquotes = false;
  if (typeof quote_style === 'undefined' || quote_style === null) {
    quote_style = 2;
  }
  string = string.toString();
  if (double_encode !== false) { // Put this first to avoid double-encoding
    string = string.replace(/&/g, '&amp;');
  }
  string = string.replace(/</g, '&lt;').replace(/>/g, '&gt;');

  var OPTS = {
    'ENT_NOQUOTES': 0,
    'ENT_HTML_QUOTE_SINGLE': 1,
    'ENT_HTML_QUOTE_DOUBLE': 2,
    'ENT_COMPAT': 2,
    'ENT_QUOTES': 3,
    'ENT_IGNORE': 4
  };
  if (quote_style === 0) {
    noquotes = true;
  }
  if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags
    quote_style = [].concat(quote_style);
    for (i = 0; i < quote_style.length; i++) {
      // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4
      if (OPTS[quote_style[i]] === 0) {
        noquotes = true;
      }
      else if (OPTS[quote_style[i]]) {
        optTemp = optTemp | OPTS[quote_style[i]];
      }
    }
    quote_style = optTemp;
  }
  if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {
    string = string.replace(/'/g, '&#039;');
  }
  if (!noquotes) {
    string = string.replace(/"/g, '&quot;');
  }

  return string;
}
//]]>
</script>
